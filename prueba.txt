DECLARE.SECTION
	[zeroInt, zeroFloat] := [INT, FLOAT]
	[sumInt, sumFloat, countInt, countFloat] := [INT, FLOAT, INT, FLOAT]
	[avg, passMark] := [FLOAT, FLOAT]
	[factorial, n] := [INT, INT]
	[fib1, fib2, fibNext, i] := [INT, INT, INT, INT]
	[searchVal, found] := [INT, INT]
ENDDECLARE.SECTION

PROGRAM.SECTION
	AsigComp([zeroInt, zeroFloat] : [0, 0.0]);

	//* Sum first 10 integers -> âˆ‘(i) from i = 1 to 10*//
	sumInt = zeroInt;
	countInt = 1;
	WHILE (countInt <= 10) {
		sumInt = sumInt + countInt;
		countInt = countInt + 1;
	};
	WRITE ( "Sum of 1 to 10:" );
	WRITE ( sumInt );

	//* Calculate average of 5 even numbers and check pass/fail *//
	sumFloat = zeroFloat;
	countFloat = 1.0;
	WHILE (countFloat <= 5.0) {
		sumFloat = sumFloat + (countFloat * 2.0);
		countFloat = countFloat + 1.0;
	};
	avg = sumFloat / 5.0;
	WRITE ( "Average is:" );
	WRITE ( avg );

	passMark = 6.0;
	IF (avg >= passMark) THEN
		WRITE ( "Status: PASSED" );
	ELSE
		WRITE ( "Status: FAILED" );
	ENDIF;

	//* Calculate factorial of 5 *//
	factorial = 1;
	n = 5;
	countInt = 1;
	WHILE (countInt <= n) {
		factorial = factorial * countInt;
		countInt = countInt + 1;
	};
	WRITE ( "Factorial of 5:" );
	WRITE ( factorial );

	//* Generate first 8 Fibonacci numbers *//
	fib1 = 0;
	fib2 = 1;
	WRITE ( "Fibonacci sequence:" );
	WRITE ( fib1 );
	WRITE ( fib2 );
	i = 3;
	WHILE (i <= 8) {
		fibNext = fib1 + fib2;
		WRITE ( fibNext );
		fib1 = fib2;
		fib2 = fibNext;
		i = i + 1;
	};

	//* Search for value 7 in range 1 to 10 *//
	searchVal = 7;
	found = 0;
	countInt = 1;
	WHILE (countInt <= 10) {
		IF (countInt == searchVal) THEN
			found = 1;
		ENDIF;
		countInt = countInt + 1;
	};
	IF (found == 1) THEN
		WRITE ( "Value 7 found in range 1 to 10" );
	ELSE
		WRITE ( "Value 7 not found" );
	ENDIF;

ENDPROGRAM.SECTION
