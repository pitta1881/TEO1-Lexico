
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 24 17:20:09 ART 2025
//----------------------------------------------------

package com.Lexico.FlexLexico;

import java.util.*;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import com.Lexico.FlexLexico.nodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 24 17:20:09 ART 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\005\000\002\005\004\000\002\005\003" +
    "\000\002\010\005\000\002\007\007\000\002\007\007\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\022\005\000\002\021\005\000\002\021\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\032\011\000\002\030\005\000" +
    "\002\030\011\000\002\030\006\000\002\030\005\000\002" +
    "\030\003\000\002\027\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\003\000" +
    "\002\031\013\000\002\031\011\000\002\020\006\000\002" +
    "\011\007\000\002\012\007\000\002\012\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\033\006\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\003\000\002" +
    "\003\005\000\002\004\005\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\014\005\016\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\030\174\001\002\000\004\002\171" +
    "\001\002\000\004\055\025\001\002\000\004\016\012\001" +
    "\002\000\004\002\000\001\002\000\014\004\014\005\015" +
    "\020\021\055\025\056\016\001\002\000\016\004\014\005" +
    "\015\017\163\020\021\055\025\056\016\001\002\000\004" +
    "\026\155\001\002\000\004\026\110\001\002\000\004\032" +
    "\064\001\002\000\004\042\uffef\001\002\000\004\042\uffee" +
    "\001\002\000\004\026\037\001\002\000\004\042\ufff0\001" +
    "\002\000\004\042\036\001\002\000\004\042\ufff2\001\002" +
    "\000\004\026\027\001\002\000\004\042\ufff1\001\002\000" +
    "\006\051\032\056\031\001\002\000\004\027\035\001\002" +
    "\000\010\027\uffc2\051\032\056\031\001\002\000\010\027" +
    "\uffc3\051\032\056\031\001\002\000\004\027\uffc5\001\002" +
    "\000\004\027\uffc4\001\002\000\004\042\uffc6\001\002\000" +
    "\024\004\ufff3\005\ufff3\007\ufff3\010\ufff3\017\ufff3\020\ufff3" +
    "\025\ufff3\055\ufff3\056\ufff3\001\002\000\004\030\041\001" +
    "\002\000\004\027\063\001\002\000\004\056\042\001\002" +
    "\000\006\031\044\044\045\001\002\000\014\051\055\052" +
    "\050\053\054\054\053\056\052\001\002\000\004\043\057" +
    "\001\002\000\004\056\046\001\002\000\006\031\044\044" +
    "\045\001\002\000\014\051\055\052\050\053\054\054\053" +
    "\056\052\001\002\000\006\031\uffca\044\uffca\001\002\000" +
    "\004\044\056\001\002\000\006\031\uffcb\044\uffcb\001\002" +
    "\000\006\031\uffc8\044\uffc8\001\002\000\006\031\uffc9\044" +
    "\uffc9\001\002\000\006\031\uffc7\044\uffc7\001\002\000\014" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000" +
    "\004\030\060\001\002\000\014\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\056\uffcc\001\002\000\004\031\062\001\002\000" +
    "\004\027\uffce\001\002\000\004\042\uffcf\001\002\000\016" +
    "\026\065\051\074\052\071\053\066\054\072\056\067\001" +
    "\002\000\016\026\065\051\074\052\071\053\066\054\072" +
    "\056\067\001\002\000\036\012\uffe3\013\uffe3\027\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000\036\012" +
    "\uffe5\013\uffe5\027\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\001\002\000\036\012\uffe6\013\uffe6\027\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\001\002\000\036\012\uffe4" +
    "\013\uffe4\027\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\001\002\000\036\012\uffe2\013\uffe2\027\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\001\002\000\036\012\uffea\013" +
    "\uffea\027\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\uffea\045\uffea\046\uffea\047\102\050\101\001" +
    "\002\000\036\012\uffe1\013\uffe1\027\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\001\002\000\010\042\uffed\045\077" +
    "\046\076\001\002\000\016\026\065\051\074\052\071\053" +
    "\066\054\072\056\067\001\002\000\016\026\065\051\074" +
    "\052\071\053\066\054\072\056\067\001\002\000\036\012" +
    "\uffec\013\uffec\027\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\045\uffec\046\uffec\047\102\050" +
    "\101\001\002\000\014\051\074\052\071\053\066\054\072" +
    "\056\067\001\002\000\014\051\074\052\071\053\066\054" +
    "\072\056\067\001\002\000\036\012\uffe9\013\uffe9\027\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\036" +
    "\012\uffe8\013\uffe8\027\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\001\002\000\036\012\uffeb\013\uffeb\027\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb" +
    "\045\uffeb\046\uffeb\047\102\050\101\001\002\000\010\027" +
    "\107\045\077\046\076\001\002\000\036\012\uffe7\013\uffe7" +
    "\027\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\001\002" +
    "\000\020\011\113\026\112\051\074\052\071\053\066\054" +
    "\072\056\067\001\002\000\010\012\145\013\147\027\uffdb" +
    "\001\002\000\016\026\065\051\074\052\071\053\066\054" +
    "\072\056\067\001\002\000\004\026\137\001\002\000\022" +
    "\033\135\034\130\035\127\036\131\037\133\040\134\045" +
    "\077\046\076\001\002\000\004\027\116\001\002\000\004" +
    "\006\117\001\002\000\014\004\014\005\015\020\021\055" +
    "\025\056\016\001\002\000\020\004\014\005\015\007\122" +
    "\010\121\020\021\055\025\056\016\001\002\000\004\042" +
    "\uffd0\001\002\000\014\004\014\005\015\020\021\055\025" +
    "\056\016\001\002\000\004\042\124\001\002\000\024\004" +
    "\ufff4\005\ufff4\007\ufff4\010\ufff4\017\ufff4\020\ufff4\025\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\016\004\014\005\015\010" +
    "\126\020\021\055\025\056\016\001\002\000\004\042\uffd1" +
    "\001\002\000\016\026\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\056\uffd7\001\002\000\016\026\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\056\uffd8\001\002\000\016\026\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002\000\016" +
    "\026\065\051\074\052\071\053\066\054\072\056\067\001" +
    "\002\000\016\026\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\056\uffd5\001\002\000\016\026\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\001\002\000\016\026\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\056\uffd9\001\002\000\014\012" +
    "\uffda\013\uffda\027\uffda\045\077\046\076\001\002\000\016" +
    "\026\065\051\074\052\071\053\066\054\072\056\067\001" +
    "\002\000\004\027\141\001\002\000\004\027\uffdd\001\002" +
    "\000\004\027\144\001\002\000\024\027\107\033\135\034" +
    "\130\035\127\036\131\037\133\040\134\045\077\046\076" +
    "\001\002\000\010\012\145\013\147\027\uffdf\001\002\000" +
    "\016\026\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3" +
    "\001\002\000\004\026\150\001\002\000\016\026\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\056\uffd2\001\002\000\016" +
    "\026\065\051\074\052\071\053\066\054\072\056\067\001" +
    "\002\000\004\027\152\001\002\000\004\027\uffde\001\002" +
    "\000\016\026\065\051\074\052\071\053\066\054\072\056" +
    "\067\001\002\000\004\027\uffdc\001\002\000\020\011\113" +
    "\026\112\051\074\052\071\053\066\054\072\056\067\001" +
    "\002\000\004\027\157\001\002\000\004\024\160\001\002" +
    "\000\014\004\014\005\015\020\021\055\025\056\016\001" +
    "\002\000\016\004\014\005\015\020\021\025\162\055\025" +
    "\056\016\001\002\000\004\042\uffe0\001\002\000\004\002" +
    "\ufff5\001\002\000\004\042\167\001\002\000\004\017\166" +
    "\001\002\000\004\002\uffc1\001\002\000\006\017\uffbf\055" +
    "\025\001\002\000\004\017\uffc0\001\002\000\004\002\001" +
    "\001\002\000\006\015\213\030\174\001\002\000\006\015" +
    "\ufffc\030\ufffc\001\002\000\004\056\175\001\002\000\006" +
    "\031\200\044\201\001\002\000\004\031\177\001\002\000" +
    "\006\015\ufffb\030\ufffb\001\002\000\004\041\210\001\002" +
    "\000\004\056\175\001\002\000\004\044\203\001\002\000" +
    "\010\021\205\022\206\023\204\001\002\000\006\031\ufff6" +
    "\044\ufff6\001\002\000\006\031\ufff8\044\ufff8\001\002\000" +
    "\006\031\ufff7\044\ufff7\001\002\000\006\031\ufffa\044\ufffa" +
    "\001\002\000\004\030\211\001\002\000\010\021\205\022" +
    "\206\023\204\001\002\000\006\031\ufff9\044\ufff9\001\002" +
    "\000\004\016\ufffe\001\002\000\006\015\ufffd\030\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\002\005\003\003\006\007\001\001\000" +
    "\002\001\001\000\006\005\171\010\172\001\001\000\002" +
    "\001\001\000\006\004\164\033\163\001\001\000\004\022" +
    "\010\001\001\000\002\001\001\000\020\020\016\021\012" +
    "\023\022\024\023\031\021\032\025\033\017\001\001\000" +
    "\016\020\016\023\122\024\023\031\021\032\025\033\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\027\001\001" +
    "\000\002\001\001\000\004\034\033\001\001\000\004\034" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\042\001\001" +
    "\000\004\014\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\046\001\001\000\004\014\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\067" +
    "\025\074\026\072\001\001\000\010\015\067\025\105\026" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\067" +
    "\026\104\001\001\000\006\015\067\026\077\001\001\000" +
    "\002\001\001\000\004\015\103\001\001\000\004\015\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\067" +
    "\025\113\026\072\027\110\030\114\001\001\000\004\017" +
    "\152\001\001\000\012\015\067\025\142\026\072\027\141" +
    "\001\001\000\002\001\001\000\004\016\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\016\021\117" +
    "\023\022\024\023\031\021\032\025\033\017\001\001\000" +
    "\016\020\016\023\122\024\023\031\021\032\025\033\017" +
    "\001\001\000\002\001\001\000\020\020\016\021\124\023" +
    "\022\024\023\031\021\032\025\033\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\016\023\122\024" +
    "\023\031\021\032\025\033\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\067\025\135\026\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\067\025\113\026\072\027\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\131\001\001\000\004\017\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\067\025" +
    "\113\026\072\027\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\067\025\113\026\072\027\153\001" +
    "\001\000\002\001\001\000\014\015\067\025\113\026\072" +
    "\027\110\030\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\016\021\160\023\022\024\023\031\021" +
    "\032\025\033\017\001\001\000\016\020\016\023\122\024" +
    "\023\031\021\032\025\033\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\167\033\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\213\001\001\000" +
    "\002\001\001\000\004\007\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\201\001\001\000\002\001\001\000\004\013\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** Método llamado automáticamente ante errores sintácticos */
    public void syntax_error(Symbol s) {
        int linea = s.left;
        int columna = s.right;
        if (linea != -1 && columna != -1) {
            System.out.println("Error en la línea " + linea + ", columna " + columna + ". Símbolo no reconocido: " + s.value);
            throw new RuntimeException("Error en la línea " + linea + ", columna " + columna + ". Símbolo no reconocido: " + s.value);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    List<Object> result = new ArrayList<>();
    ArrayList<TokenObject> tokenList = new ArrayList<>();
    ArrayList<RuleObject> rulesList = new ArrayList<>();
	Stack<String> typesStack = new Stack<String>();

	List<String> declareTypesIds = new ArrayList<>();
	List<Node> declareTypesType = new ArrayList<>();
    List<String> declareVarTypes = new ArrayList<>();

    Map<String, TokenObject> globalDeclareVariables = new HashMap<>();
    String currentType = null;

    public void addNewRule(int id, String start, RuleItem... rules) {
        ArrayList<RuleItem> rulesTemp = new ArrayList();
        rulesTemp.addAll(Arrays.asList(rules));
        rulesList.add(new RuleObject(id, start, rulesTemp));
    }

    public RuleItem addTerminalRuleItem(String terminal) {
        return new RuleItem(RuleType.T, terminal);
    }

    public RuleItem addNonTerminalRuleItem(String nonTerminal) {
        return new RuleItem(RuleType.NT, nonTerminal);
    }
    
    public void addType(String type){
    	typesStack.add(type);
    }
    
    public String getType(){
    	return typesStack.pop();
    }
    
	public void sortTypes(){
	    if (typesStack.isEmpty()) return;
	    List<TokenObject> tokenIds = tokenList.stream()
	        .filter(token -> token.name().equals("ID") && !token.type().isPresent())
	        .collect(Collectors.toList());
	
	    if (typesStack.size() == tokenIds.size()) {
	        tokenIds.forEach(tokenId -> tokenId.setType(Optional.of(getType())));
	    }
        checkDuplicatedDeclaredVariables(tokenIds);
	}

    public List<NodeComplexAssign> fixComplexAssign(){
        List<NodeComplexAssign> fixedDeclarations = new ArrayList<NodeComplexAssign>();
        int sizeLength = declareTypesIds.size();
        Collections.reverse(declareTypesIds);
        for (int i = 0; i < sizeLength; i++) {
            fixedDeclarations.add(new NodeComplexAssign(new Node(declareTypesIds.get(i)), declareTypesType.get(i)));
        }
        for (int i = 0; i < sizeLength; i++) {
            String varType = declareVarTypes.get(i);
            String id = declareTypesIds.get(i);
            if (globalDeclareVariables.containsKey(id) && globalDeclareVariables.get(id).type().isPresent()) {
                String tokenType = globalDeclareVariables.get(id).type().get();
                if (varType.equals("ID")) {
                    TokenObject token = globalDeclareVariables.get(id);
                    if (token != null && token.type().isPresent()) {
                        varType = token.type().get();
                    }
                }                
                if (!tokenType.equals(varType)) {
                    throw new RuntimeException("Error : Tipo de variable no coincide. Se esperaba '" + tokenType + "' pero se encontró '" + varType + "'.");
                }
            }
        }
        declareTypesIds.clear();
        declareTypesType.clear();
        declareVarTypes.clear();
        return fixedDeclarations;
    }

    public void checkDuplicatedDeclaredVariables(List<TokenObject> tokenIds) {
        for (TokenObject token : tokenIds) {
            if (globalDeclareVariables.containsKey(token.value())) {
                throw new RuntimeException("Error: Variable '" + token.value() + "' ya declarada.");
            }
            globalDeclareVariables.put(token.value(), token);
        }
    }

    public void checkVariableIsDeclared(String id) {
        if (!globalDeclareVariables.containsKey(id)) {
            throw new RuntimeException("Error: Variable '" + id + "' no declarada.");
        }
    }

    public void setCurrentType(String type, Object value) {
        if (type.equals("ID")) {
            TokenObject token = globalDeclareVariables.get(value);
            if (token != null && token.type().isPresent()) {
                type = token.type().get();
            }
        }
        if (currentType == null) {
            currentType = type;
        } else if (!currentType.equals(type)) {
            throw new RuntimeException("Error : Tipo de variable no coincide. Se esperaba '" + currentType + "' pero se encontró '" + type + "'. Valor: " + value.toString());
        }
    }

    public void clearCurrentType() {
        currentType = null;
    }

    public void checkCurrentType(String id) {
        TokenObject token = globalDeclareVariables.get(id);
        if (token != null && token.type().isPresent()) {
            String type = token.type().get();
            if (!type.equals(currentType)) {
                throw new RuntimeException("Error Variable: " + id + ": Tipo de variable no coincide. Se esperaba '" + type + "' pero se encontró '" + currentType + "'.");
            }
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PROGRAM_WRITE ::= SALIDA Punto_y_coma 
            {
              Object RESULT =null;
		
                addNewRule(65, "PROGRAM_WRITE -> ",
                    addNonTerminalRuleItem("SALIDA"),
                    addTerminalRuleItem("Punto_y_coma")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_WRITE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PROGRAM_WRITE ::= SALIDA Punto_y_coma PROGRAM_WRITE 
            {
              Object RESULT =null;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                addNewRule(64, "PROGRAM_WRITE -> ",
                    addNonTerminalRuleItem("SALIDA"),
                    addTerminalRuleItem(pyc),
                    addNonTerminalRuleItem("PROGRAM_WRITE")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_WRITE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PROGRAM_SECTION_WRITE ::= Program_section PROGRAM_WRITE Endprogram_section 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int epsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("PROGRAM_SECTION", ps, Optional.empty()));
                    tokenList.add(new TokenObject("ENDPROGRAM_SECTION", eps, Optional.empty()));
                    addNewRule(63, "PROGRAM_SECTION_WRITE -> ",
                        addTerminalRuleItem(ps),
                        addNonTerminalRuleItem("PROGRAM_WRITE"),
                        addTerminalRuleItem(eps)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_SECTION_WRITE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TEXTO ::= Id 
            {
              List<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(62, "TEXTO -> ",
                    addTerminalRuleItem(id)
                );
                List<Node> textList = new ArrayList<Node>();
                textList.add(new Node(id));
                checkVariableIsDeclared(id);
                RESULT = textList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TEXTO ::= Cte_s 
            {
              List<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                addNewRule(61, "TEXTO -> ",
                    addTerminalRuleItem(s)
                );
                List<Node> textList = new ArrayList<Node>();
                textList.add(new Node(s.replace("\"", "'")));
                RESULT = textList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TEXTO ::= Id TEXTO 
            {
              List<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int textListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Node> textList = (List<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(60, "TEXTO -> ",
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("TEXTO")
                );
                textList.add(new Node(id));
                checkVariableIsDeclared(id);
                RESULT = textList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TEXTO ::= Cte_s TEXTO 
            {
              List<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int textListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Node> textList = (List<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                addNewRule(59, "TEXTO -> ",
                    addTerminalRuleItem(s),
                    addNonTerminalRuleItem("TEXTO")
                );
                textList.add(new Node(s.replace("\"", "'")));
                RESULT = textList;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SALIDA ::= Write Parentesis_abierto TEXTO Parentesis_cerrado 
            {
              NodeWrite RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Node> txt = (List<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Write", w, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(58, "SALIDA -> ",
                    addTerminalRuleItem(w),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("TEXTO"),
                    addTerminalRuleItem(pc)
                );
                RESULT = new NodeWrite(txt);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALIDA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGN_DERECHA ::= Cte_s 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                    addNewRule(57, "FACTOR -> ",
                        addTerminalRuleItem(s)
                    );
                    declareVarTypes.add("STRING");
                    RESULT = new Node(s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGN_DERECHA ::= Cte_b 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_b", b, Optional.empty()));
                      addNewRule(56, "FACTOR -> ",
                          addTerminalRuleItem(b)
                      );
                        declareVarTypes.add("BOOLEAN");
                        RESULT = new Node(b);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGN_DERECHA ::= Cte_i 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_i", e, Optional.empty()));
                      addNewRule(55, "FACTOR -> ",
                          addTerminalRuleItem(e)
                      );
                        declareVarTypes.add("INT");
                        RESULT = new Node(e);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGN_DERECHA ::= Cte_f 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      tokenList.add(new TokenObject("Cte_f", f, Optional.empty()));
                      addNewRule(54, "FACTOR -> ",
                          addTerminalRuleItem(f)
                      );
                        declareVarTypes.add("FLOAT");
                      RESULT = new Node(f);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGN_DERECHA ::= Id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      addNewRule(53, "FACTOR -> ",
                          addTerminalRuleItem(id)
                      );
                      checkVariableIsDeclared(id);
                      declareVarTypes.add("ID");
                      RESULT = new Node(id);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN_DERECHA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OTRA_ASIGN ::= Corchete_cerrado Dos_puntos Corchete_abierto 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                tokenList.add(new TokenObject("Dos_puntos", dp, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                addNewRule(52, "OTRA_ASIGN -> ",
                    addTerminalRuleItem(cc),
                    addTerminalRuleItem(dp),
                    addTerminalRuleItem(ca)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_ASIGN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRA_ASIGN ::= Coma Id OTRA_ASIGN ASIGN_DERECHA Coma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n_asigDerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_asigDerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node n_asigDer = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Coma", c, Optional.empty()));
                tokenList.add(new TokenObject("Coma", cc, Optional.empty()));
                addNewRule(51, "OTRA_ASIGN -> ",
                    addTerminalRuleItem(c),
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("OTRA_ASIGN"),
                    addNonTerminalRuleItem("ASIGN_DERECHA"),
                    addTerminalRuleItem(cc)
                );
                checkVariableIsDeclared(id);
                declareTypesIds.add(id);
                declareTypesType.add(n_asigDer);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OTRA_ASIGN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGN ::= Corchete_abierto Id OTRA_ASIGN ASIGN_DERECHA Corchete_cerrado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n_asigDerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_asigDerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node n_asigDer = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                addNewRule(50, "ASIGN -> ",
                    addTerminalRuleItem(ca),
                    addTerminalRuleItem(id),
                    addNonTerminalRuleItem("OTRA_ASIGN"),
                    addNonTerminalRuleItem("ASIGN_DERECHA"),
                    addTerminalRuleItem(cc)
                );
                checkVariableIsDeclared(id);
                declareTypesIds.add(id);
                declareTypesType.add(n_asigDer);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION_COMPLEJA ::= Asign_comp Parentesis_abierto ASIGN Parentesis_cerrado 
            {
              List<NodeComplexAssign> RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Asign_comp", ac, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(49, "ASIGNACION_COMPLEJA -> ",
                    addTerminalRuleItem(ac),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("ASIGN"),
                    addTerminalRuleItem(pc)
                );
                RESULT = fixComplexAssign();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SELECCION ::= If Parentesis_abierto CONDICION Parentesis_cerrado Then PROGRAM Endif 
            {
              NodeIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeLogical cond = (NodeLogical)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int progThenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int progThenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodeSentence> progThen = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("If", i, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Then", t, Optional.empty()));
                tokenList.add(new TokenObject("Endif", ei, Optional.empty()));
                addNewRule(48, "SELECCION -> ",
                    addTerminalRuleItem(i),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(t),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(ei)
                );
                RESULT = new NodeIf(cond, progThen, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SELECCION ::= If Parentesis_abierto CONDICION Parentesis_cerrado Then PROGRAM Else PROGRAM Endif 
            {
              NodeIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodeLogical cond = (NodeLogical)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int progThenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int progThenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<NodeSentence> progThen = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int progElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int progElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodeSentence> progElse = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("If", i, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Then", t, Optional.empty()));
                tokenList.add(new TokenObject("Else", e, Optional.empty()));
                tokenList.add(new TokenObject("Endif", ei, Optional.empty()));
                addNewRule(47, "SELECCION -> ",
                    addTerminalRuleItem(i),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(t),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(e),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(ei)
                );
                RESULT = new NodeIf(cond, progThen, progElse);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL ::= Or 
            {
              Node RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Or", o, Optional.empty()));
                addNewRule(46, "CONDICIONAL -> ",
                    addTerminalRuleItem(o)
                );
                RESULT = new Node(o);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL ::= And 
            {
              Node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("And", a, Optional.empty()));
                addNewRule(45, "CONDICIONAL -> ",
                    addTerminalRuleItem(a)
                );
                RESULT = new Node(a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMPARADOR ::= Diferente 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Diferente", m, Optional.empty()));
                addNewRule(44, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMPARADOR ::= Igual 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Igual", m, Optional.empty()));
                addNewRule(43, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMPARADOR ::= Menor_o_igual_que 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Menor_o_igual_que", m, Optional.empty()));
                addNewRule(42, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMPARADOR ::= Mayor_o_igual_que 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Mayor_o_igual_que", m, Optional.empty()));
                addNewRule(41, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMPARADOR ::= Mayor_que 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Mayor_que", m, Optional.empty()));
                addNewRule(40, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMPARADOR ::= Menor_que 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Menor_que", m, Optional.empty()));
                addNewRule(39, "COMPARADOR -> ",
                    addTerminalRuleItem(m)
                );
                RESULT = new Node(m);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARADOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMPARACION ::= EXPRESION COMPARADOR EXPRESION 
            {
              NodeComparation RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeArithmetic exp = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node comp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeArithmetic exp2 = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(38, "COMPARACION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addNonTerminalRuleItem("COMPARADOR"),
                    addNonTerminalRuleItem("EXPRESION")
                );
                clearCurrentType();
                RESULT = new NodeComparation(comp, exp, exp2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= COMPARACION 
            {
              NodeLogical RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeComparation comp = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(37, "COMPARACION -> ",
                    addNonTerminalRuleItem("COMPARACION")
                );
                RESULT = new NodeLogical(comp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= COMPARACION CONDICIONAL COMPARACION 
            {
              NodeLogical RESULT =null;
		int comp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeComparation comp1 = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeComparation comp2 = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(36, "CONDICION -> ",
                    addNonTerminalRuleItem("COMPARACION"),
                    addNonTerminalRuleItem("CONDICIONAL"),
                    addNonTerminalRuleItem("COMPARACION")
                );
                RESULT = new NodeLogical(cond,comp1,comp2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= Not Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              NodeLogical RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeComparation comp = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Not", n, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(35, "CONDICION -> ",
                    addTerminalRuleItem(n),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc)
                );
                RESULT = new NodeLogical(comp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= Parentesis_abierto COMPARACION Parentesis_cerrado CONDICIONAL Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              NodeLogical RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int comp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int comp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodeComparation comp1 = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeComparation comp2 = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa2, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc2, Optional.empty()));
                addNewRule(34, "CONDICION -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc),
                    addNonTerminalRuleItem("CONDICIONAL"),
                    addTerminalRuleItem(pa2),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc2)
                );
                RESULT = new NodeLogical(cond,comp1,comp2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= Parentesis_abierto COMPARACION Parentesis_cerrado 
            {
              NodeLogical RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeComparation comp = (NodeComparation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(33, "CONDICION -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("COMPARACION"),
                    addTerminalRuleItem(pc)
                );
                RESULT = new NodeLogical(comp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ITERACION ::= While Parentesis_abierto CONDICION Parentesis_cerrado Llave_abierta PROGRAM Llave_cerrada 
            {
              NodeWhile RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeLogical cond = (NodeLogical)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodeSentence> blockBody = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("While", w, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                tokenList.add(new TokenObject("Llave_abierta", la, Optional.empty()));
                tokenList.add(new TokenObject("Llave_cerrada", lc, Optional.empty()));
                addNewRule(32, "ITERACION -> ",
                    addTerminalRuleItem(w),
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("CONDICION"),
                    addTerminalRuleItem(pc),
                    addTerminalRuleItem(la),
                    addNonTerminalRuleItem("PROGRAM"),
                    addTerminalRuleItem(lc)
                );
                RESULT = new NodeWhile(cond, blockBody);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= Cte_s 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_s", s, Optional.empty()));
                addNewRule(32, "FACTOR -> ",
                    addTerminalRuleItem(s)
                );
                setCurrentType("STRING", s);
                RESULT = new NodeArithmetic(new Node(s.replace("\"", "'")));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= Cte_b 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_b", b, Optional.empty()));
                addNewRule(31, "FACTOR -> ",
                    addTerminalRuleItem(b)
                );
                setCurrentType("BOOLEAN", b);
                RESULT = new NodeArithmetic(new Node(b));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= Cte_i 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_i", e, Optional.empty()));
                addNewRule(30, "FACTOR -> ",
                    addTerminalRuleItem(e)
                );
                setCurrentType("INT", e);
                RESULT = new NodeArithmetic(new Node(e));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTOR ::= Cte_f 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Cte_f", f, Optional.empty()));
                addNewRule(29, "FACTOR -> ",
                    addTerminalRuleItem(f)
                );
                setCurrentType("FLOAT", f);
                RESULT = new NodeArithmetic(new Node(f));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTOR ::= Id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(28, "FACTOR -> ",
                    addTerminalRuleItem(id)
                );
                checkVariableIsDeclared(id);
                setCurrentType("ID", id);
                RESULT = new NodeArithmetic(new Node(id));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TERMINO ::= FACTOR 
            {
              NodeArithmetic RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fact = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(26, "TERMINO -> ",
                    addNonTerminalRuleItem("FACTOR")
                );
                RESULT = new NodeArithmetic(new NodeArithmetic(fact));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TERMINO ::= Parentesis_abierto EXPRESION Parentesis_cerrado 
            {
              NodeArithmetic RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeArithmetic exp = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Parentesis_abierto", pa, Optional.empty()));
                tokenList.add(new TokenObject("Parentesis_cerrado", pc, Optional.empty()));
                addNewRule(27, "FACTOR -> ",
                    addTerminalRuleItem(pa),
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(pc)
                );
                RESULT = exp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TERMINO ::= TERMINO Division FACTOR 
            {
              NodeArithmetic RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeArithmetic term = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fact = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Division", d, Optional.empty()));
                addNewRule(25, "TERMINO -> ",
                    addNonTerminalRuleItem("TERMINO"),
                    addTerminalRuleItem(d),
                    addNonTerminalRuleItem("FACTOR")
                );
                RESULT = new NodeArithmetic("/", term, new NodeArithmetic(fact));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TERMINO ::= TERMINO Multiplicacion FACTOR 
            {
              NodeArithmetic RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeArithmetic term = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fact = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Multiplicacion", m, Optional.empty()));
                addNewRule(24, "TERMINO -> ",
                    addNonTerminalRuleItem("TERMINO"),
                    addTerminalRuleItem(m),
                    addNonTerminalRuleItem("FACTOR")
                );
                RESULT = new NodeArithmetic("*", term, new NodeArithmetic(fact));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= TERMINO 
            {
              NodeArithmetic RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeArithmetic term = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              addNewRule(23, "EXPRESION -> ",
                  addNonTerminalRuleItem("TERMINO")
              );
                RESULT = term;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              NodeArithmetic RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeArithmetic exp = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeArithmetic term = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Resta", r, Optional.empty()));
                addNewRule(22, "EXPRESION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(r),
                    addNonTerminalRuleItem("TERMINO")
                );
                RESULT = new NodeArithmetic("-", exp, term);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              NodeArithmetic RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeArithmetic exp = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeArithmetic term = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Suma", s, Optional.empty()));
                addNewRule(21, "EXPRESION -> ",
                    addNonTerminalRuleItem("EXPRESION"),
                    addTerminalRuleItem(s),
                    addNonTerminalRuleItem("TERMINO")
                );
                RESULT = new NodeArithmetic("+", exp, term);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= Id Asignacion EXPRESION 
            {
              NodeSimpleAssign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeArithmetic exp = (NodeArithmetic)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("ASIGNACION", a, Optional.empty()));
                addNewRule(20, "ASIGNACION -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(a),
                    addNonTerminalRuleItem("EXPRESION")
                );
                checkVariableIsDeclared(id);
                checkCurrentType(id);
                clearCurrentType();
                RESULT = new NodeSimpleAssign(new Node(id), exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SALIDA 
            {
              NodeSentence RESULT =null;
		int n_salleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n_salright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeWrite n_sal = (NodeWrite)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(19, "SALIDA -> ",
                    addNonTerminalRuleItem("SALIDA")
                );
                RESULT = new NodeSentence(n_sal);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= ASIGNACION_COMPLEJA 
            {
              NodeSentence RESULT =null;
		int n_complexAssignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n_complexAssignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodeComplexAssign> n_complexAssign = (List<NodeComplexAssign>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  addNewRule(18, "ASIGNACION_COMPLEJA -> ",
                      addNonTerminalRuleItem("ASIGNACION_COMPLEJA")
                  );
                  RESULT = new NodeSentence(n_complexAssign);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SELECCION 
            {
              NodeSentence RESULT =null;
		int n_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeIf n_if = (NodeIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(17, "SELECCION -> ",
                    addNonTerminalRuleItem("SELECCION")
                );
                RESULT = new NodeSentence(n_if);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ITERACION 
            {
              NodeSentence RESULT =null;
		int n_iteraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n_iteraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeWhile n_itera = (NodeWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(16, "ITERACION -> ",
                    addNonTerminalRuleItem("ITERACION")
                );
                RESULT = new NodeSentence(n_itera);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ASIGNACION 
            {
              NodeSentence RESULT =null;
		int n_simpleAssignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n_simpleAssignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeSimpleAssign n_simpleAssign = (NodeSimpleAssign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(15, "ASIGNACION -> ",
                    addNonTerminalRuleItem("ASIGNACION")
                );
                RESULT = new NodeSentence(n_simpleAssign);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAM ::= SENTENCIA Punto_y_coma 
            {
              List<NodeSentence> RESULT =null;
		int n_sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeSentence n_sent = (NodeSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                addNewRule(14, "PROGRAM -> ",
                    addNonTerminalRuleItem("SENTENCIA"),
                    addTerminalRuleItem("Punto_y_coma")
                );
                List<NodeSentence> mainSentences = new ArrayList<NodeSentence>();
                mainSentences.add(n_sent);
                RESULT = mainSentences;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAM ::= PROGRAM SENTENCIA Punto_y_coma 
            {
              List<NodeSentence> RESULT =null;
		int n_progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n_progright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodeSentence> n_prog = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n_sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeSentence n_sent = (NodeSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(13, "PROGRAM -> ",
                    addNonTerminalRuleItem("SENTENCIA"),
                    addTerminalRuleItem(pyc),
                    addNonTerminalRuleItem("PROGRAM")
                );
                n_prog.add(n_sent);
                RESULT = n_prog;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAM_SECTION ::= Program_section PROGRAM Endprogram_section 
            {
              List<NodeSentence> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n_progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_progright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodeSentence> n_prog = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int epsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("PROGRAM_SECTION", ps, Optional.empty()));
                    tokenList.add(new TokenObject("ENDPROGRAM_SECTION", eps, Optional.empty()));
                    addNewRule(12, "PROGRAM_SECTION -> ",
                        addTerminalRuleItem(ps),
                        addNonTerminalRuleItem("PROGRAM"),
                        addTerminalRuleItem(eps)
                    );
                    RESULT = n_prog;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM_SECTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= String 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          addType("STRING");
          tokenList.add(new TokenObject("STRING", s, Optional.empty()));
          addNewRule(11, "TIPO -> ",
                addTerminalRuleItem(s)
            );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= Int 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          addType("INT");
          tokenList.add(new TokenObject("INT", i, Optional.empty()));
          addNewRule(10, "TIPO -> ",
                addTerminalRuleItem(i)
            );
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= Float 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            addType("FLOAT");
            tokenList.add(new TokenObject("FLOAT", f, Optional.empty()));
            addNewRule(9, "TIPO -> ",
                addTerminalRuleItem(f)
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ITEMS ::= Id Corchete_cerrado Asign_mult Corchete_abierto TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tipo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("ID", id, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty()));
                tokenList.add(new TokenObject("Asign_mult", am, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                addNewRule(8, "ITEMS -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(cc),
                    addTerminalRuleItem(am),
                    addTerminalRuleItem(ca),
                    addNonTerminalRuleItem("TIPO")
                );
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ITEMS ::= Id Coma ITEMS Coma TIPO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node tipo = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("ID", id, Optional.empty()));
                tokenList.add(new TokenObject("Coma", c, Optional.empty()));
                tokenList.add(new TokenObject("Coma", cc, Optional.empty()));               
                addNewRule(7, "ITEMS -> ",
                    addTerminalRuleItem(id),
                    addTerminalRuleItem(c),
                    addNonTerminalRuleItem("ITEMS"),
                    addTerminalRuleItem(cc),
                    addNonTerminalRuleItem("TIPO")
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEMS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Corchete_abierto ITEMS Corchete_cerrado 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tokenList.add(new TokenObject("Corchete_abierto", ca, Optional.empty()));
                tokenList.add(new TokenObject("Corchete_cerrado", cc, Optional.empty())); 
                sortTypes();             
                addNewRule(6, "DECLARACION -> ",
                    addTerminalRuleItem(ca),
                    addNonTerminalRuleItem("ITEMS"),
                    addTerminalRuleItem(cc)
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;
		
                    addNewRule(5, "DECLARACIONES -> ",
                        addNonTerminalRuleItem("DECLARACION")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;
		
                    addNewRule(4, "DECLARACIONES -> ",
                        addNonTerminalRuleItem("DECLARACION"),
                        addNonTerminalRuleItem("DECLARACIONES")
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_SECTION ::= Declare_section DECLARACIONES Enddeclare_section 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eds = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    tokenList.add(new TokenObject("DECLARE_SECTION", ds, Optional.empty()));
                    tokenList.add(new TokenObject("ENDDECLARE_SECTION", eds, Optional.empty()));
                    addNewRule(3, "DECLARESECTION -> ",
                        addTerminalRuleItem(ds),
                        addNonTerminalRuleItem("DECLARACIONES"),
                        addTerminalRuleItem(eds)
                    );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE_SECTION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PROGRAM_SECTION_WRITE 
            {
              Object RESULT =null;
		
                addNewRule(2, "START -> ",
                    addNonTerminalRuleItem("PROGRAM_SECTION_WRITE")
                );
                RESULT = new TokenRulesNodeObject(tokenList, rulesList, new NodeStart(null));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= DECLARE_SECTION PROGRAM_SECTION 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodeSentence> ps = (List<NodeSentence>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                addNewRule(1, "START -> ",
                    addNonTerminalRuleItem("DECLARE_SECTION"),
                    addNonTerminalRuleItem("PROGRAM_SECTION")
                );
                RESULT = new TokenRulesNodeObject(tokenList, rulesList, new NodeStart(ps));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

